import pytest

from bot.handlers.specialist_logics.register_specialist import (
    i_am_specialist,
    register,
    name,
    surname,
    age,
    photo,
    description,
    resume
)

from aiogram_tests import MockedBot
from aiogram_tests.handler import MessageHandler
from aiogram_tests.types.dataset import MESSAGE

from bot.states import SpecialistRegisterState, UserState
from bot.keyboards.reply import rmk, register_kb


@pytest.mark.asyncio
async def test_i_am_specialist():
    request = MockedBot(MessageHandler(i_am_specialist, state=UserState.MENU_STATE))
    calls = await request.query(message=MESSAGE.as_object(text="üë®‚Äç‚öïÔ∏è –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"))
    answer_message = calls.send_message.fetchmany(3)

    assert answer_message[0].text.startswith("<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤!")
    assert answer_message[1].text.startswith("<b>üîπ –ö–∞–∫ —Å—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º:")
    assert answer_message[2].text.startswith("<b>üîπ –í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
    assert answer_message[2].reply_markup == register_kb


@pytest.mark.asyncio
async def test_register():
    request = MockedBot(MessageHandler(register, state=UserState.MENU_STATE))
    calls = await request.query(message=MESSAGE.as_object(text="üí¨ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
    answer_message = calls.send_message.fetchmany(2)

    assert answer_message[0].text == "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üòé"
    assert answer_message[1].text == "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è:"
    assert answer_message[1].reply_markup == rmk


@pytest.mark.asyncio
async def test_name():
    request = MockedBot(MessageHandler(name, state=SpecialistRegisterState.WAIT_FOR_NAME))
    calls = await request.query(message=MESSAGE.as_object(text="–ò–≤–∞–Ω"))
    answer_message = calls.send_message.fetchone()

    assert answer_message.text == "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"


@pytest.mark.asyncio
async def test_surname():
    request = MockedBot(MessageHandler(surname, state=SpecialistRegisterState.WAIT_FOR_SURNAME))
    calls = await request.query(message=MESSAGE.as_object(text="–ò–≤–∞–Ω–æ–≤"))
    answer_message = calls.send_message.fetchmany(2)

    assert answer_message[0].text == "–û—Ç–ª–∏—á–Ω–æ, <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</b>"
    assert answer_message[1].text == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"


@pytest.mark.asyncio
async def test_age():
    request = MockedBot(MessageHandler(age, state=SpecialistRegisterState.WAIT_FOR_AGE))
    calls = await request.query(message=MESSAGE.as_object(text="30"))
    answer_message = calls.send_message.fetchone()

    assert answer_message.text == "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"


@pytest.mark.asyncio
async def test_photo():
    request = MockedBot(MessageHandler(photo, state=SpecialistRegisterState.WAIT_FOR_PHOTO))
    photo_message = MESSAGE.as_object(photo=[{"file_id": "12345"}])
    calls = await request.query(message=photo_message)
    answer_message = calls.send_message.fetchone()

    assert answer_message.text == "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö üòá"


@pytest.mark.asyncio
async def test_description():
    request = MockedBot(MessageHandler(description, state=SpecialistRegisterState.WAIT_FOR_DESCRIPTION))
    calls = await request.query(message=MESSAGE.as_object(text="–Ø –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."))
    answer_message = calls.send_message.fetchone()

    assert answer_message.text.startswith("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é:")


@pytest.mark.asyncio
async def test_resume():
    request = MockedBot(MessageHandler(resume, state=SpecialistRegisterState.WAIT_FOR_RESUME))
    document_message = MESSAGE.as_object(document={"file_id": "67890"})
    calls = await request.query(message=document_message)
    answer_message = calls.send_message.fetchmany(2)

    assert answer_message[0].text == "–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚úçÔ∏è"
    assert answer_message[1].text == "–ö–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –í–∞–º –ø—Ä–∏–¥–µ—Ç <b>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> üí¨"
