from aiogram import Router, F, Dispatcher
from aiogram.types import CallbackQuery

from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession

from bot.filters.admin_filter import IsAdmin
from bot.keyboards.reply import main_specialist_kb, main_user_kb
from bot.keyboards.builders import approve_dismiss, no_applications_kb
from bot.states import SpecialistState, UserState
from db.methods import set_status

from db.models import Specialist
from bot.config_reader import config
from bot.fabrics.callback_factory import CallbackFactory
from .admin_menu import admin_start

admin_id = config.ADMIN_ID.get_secret_value()
router = Router()


@router.callback_query(IsAdmin(), F.data == 'update')
async def update(callback: CallbackQuery,
                 session: AsyncSession):
    await callback.answer()
    await callback.bot.delete_message(admin_id, callback.message.message_id)
    await admin_start(callback.message, session)


@router.callback_query(IsAdmin(), CallbackFactory.filter(F.action == 'approve'))
async def approve_specialist(callback: CallbackQuery,
                             callback_data: CallbackFactory,
                             session: AsyncSession,
                             dispatcher: Dispatcher) -> None:
    user_id = callback_data.value
    await callback.message.answer(
        text='–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω üëç'
    )

    specialist = await session.scalar(select(Specialist).where(Specialist.id == user_id))

    if specialist.status == -1:
        await callback.bot.send_message(
            user_id,
            "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b> üéâ")
        await dispatcher.fsm.get_context(callback.bot,
                                         user_id,
                                         user_id).set_state(SpecialistState.MENU_STATE)
        await callback.bot.send_message(
            user_id,
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /work, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏. üòäüöÄ",
            reply_markup=main_specialist_kb
        )
    await set_status(session, user_id, 0)
    await new_applications(callback, session)


@router.callback_query(IsAdmin(), CallbackFactory.filter(F.action == 'dismiss'))
async def dismiss_specialist(callback: CallbackQuery,
                             callback_data: CallbackFactory,
                             session: AsyncSession,
                             dispatcher: Dispatcher) -> None:
    user_id = callback_data.value
    await callback.message.answer(
        text='–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ‚ùå'
    )

    await session.execute(delete(Specialist).where(Specialist.id == user_id))
    await session.commit()

    await callback.bot.send_message(
        user_id,
        "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå</b>\n"
        "<tg-spoiler>–û–¥–Ω–∞–∫–æ –≤—ã –µ—â—ë –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üòå</tg-spoiler>")
    await dispatcher.fsm.get_context(callback.bot,
                                     user_id,
                                     user_id).set_state(UserState.MENU_STATE)

    specialists = await session.scalars(select(Specialist).where(Specialist.status == 1))
    await callback.bot.send_message(
        user_id,
        f"<i>–û—Ç–ø—Ä–∞–≤—å /chat –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å.\n"
        f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏:</i> <code>{len(specialists.fetchall())}</code>",
        reply_markup=main_user_kb
    )
    await new_applications(callback, session)


@router.callback_query(IsAdmin(), F.data == "new_application")
async def new_applications(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    specialist = await session.scalar(select(Specialist).where(Specialist.status == -1))
    if specialist is None:
        await callback.bot.send_animation(
            admin_id,
            animation='CgACAgQAAxkBAAIL2GY-PEbEkP-pe4VITOH_VzjxIh3qAALRAgACBqMVU32UxOd7SfRSNQQ',
            caption='–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ üí§',
            reply_markup=no_applications_kb()
        )
        return

    await callback.bot.send_document(
        chat_id=admin_id,
        document=specialist.file_id
    )

    pattern = (f"<i><b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>: {specialist.surname} {specialist.name}\n"
               f"–û —Å–µ–±–µ: {specialist.description} </i>\n\n")

    await callback.bot.send_photo(
        admin_id,
        specialist.photo_id,
        caption=pattern,
        reply_markup=approve_dismiss(specialist)
    )


@router.callback_query(IsAdmin(), F.data == "nothing")
async def total(callback: CallbackQuery):
    await callback.answer()
