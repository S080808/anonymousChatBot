import random
from aiogram import Router, F, Dispatcher
from aiogram.types import Message
from aiogram.filters import and_f, or_f, Command
from aiogram.fsm.context import FSMContext

from db import Chat, Specialist
from db.methods import get_specialists_by_status, set_status

from bot.states import UserState, SpecialistState

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.reply import main_user_kb, leave_kb, rmk

router = Router()


@router.message(
    and_f(
        or_f(F.text == "‚òï –ò—Å–∫–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", Command("chat")),
        UserState.MENU_STATE
    )
)
async def start_chat_user(message: Message,
                          state: FSMContext,
                          session: AsyncSession,
                          dispatcher: Dispatcher):
    user_id = message.from_user.id
    specialists = (await get_specialists_by_status(session, 1)).fetchall()
    if len(specialists) == 0:
        await message.answer('<b>üí§ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ üò¢</b>\n',
                             reply_markup=main_user_kb)
        specialists = await session.scalars(select(Specialist).where(Specialist.status == 1))
        await message.answer(
            f"<i>–û—Ç–ø—Ä–∞–≤—å /chat –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å.\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏:</i> <code>{len(specialists.fetchall())}</code>",
            reply_markup=main_user_kb
        )
        return
    random_specialist = random.choice(specialists)
    random_specialist.status = 2
    await message.answer('–í—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üí¨', reply_markup=rmk)

    pattern = (f"<i><b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç</b>: {random_specialist.surname} {random_specialist.name}\n"
               f"–û —Å–µ–±–µ: {random_specialist.description} </i>\n\n"
               f"<b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç - {random_specialist.name} –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å ü§ó</b>")

    await message.answer_photo(
        random_specialist.photo_id,
        caption=pattern,
        reply_markup=leave_kb
    )
    await message.bot.send_message(random_specialist.id, 'üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ',
                                   reply_markup=leave_kb)

    session.add(Chat(user_id=user_id, specialist_id=random_specialist.id))
    await session.commit()
    await state.set_state(UserState.IN_CHAT)
    await dispatcher.fsm.get_context(message.bot,
                                     random_specialist.id,
                                     random_specialist.id).set_state(SpecialistState.IN_CHAT)


@router.message(
    and_f(
        or_f(F.text == "‚òï –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", Command("work")),
        SpecialistState.MENU_STATE
    )
)
async def start_chat_specialist(message: Message,
                                state: FSMContext,
                                session: AsyncSession):
    user_id = message.from_user.id
    await message.reply(
            "<b>‚òï –ù–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫.</i>",
            reply_markup=rmk)
    await set_status(session, user_id, 1)
    await state.set_state(SpecialistState.AVAILABLE)
